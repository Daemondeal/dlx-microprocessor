-- Generated by instrs_codegen.py, DO NOT TOUCH

library ieee;

use ieee.std_logic_1164.all;
use work.constants.all;

package instructions is
    constant RTYPE_OP: std_logic_vector(OPCODE_SIZE-1 downto 0) := "000000"; -- (0x00);
    constant ITYPE_ADDI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001000"; -- (0x08);
    constant ITYPE_ADDUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001001"; -- (0x09);
    constant ITYPE_SUBI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001010"; -- (0x0A);
    constant ITYPE_SUBUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001011"; -- (0x0B);
    constant ITYPE_BEQZ: std_logic_vector(OPCODE_SIZE-1 downto 0) := "000100"; -- (0x04);
    constant ITYPE_BNEZ: std_logic_vector(OPCODE_SIZE-1 downto 0) := "000101"; -- (0x05);
    constant ITYPE_JALR: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010011"; -- (0x13);
    constant ITYPE_JR: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010010"; -- (0x12);
    constant ITYPE_SEQI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011000"; -- (0x18);
    constant ITYPE_SGEI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011101"; -- (0x1D);
    constant ITYPE_SGEUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "111101"; -- (0x3D);
    constant ITYPE_SGTI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011011"; -- (0x1B);
    constant ITYPE_SGTUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "111011"; -- (0x3B);
    constant ITYPE_SLEI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011100"; -- (0x1C);
    constant ITYPE_SLEUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "111100"; -- (0x3C);
    constant ITYPE_SLTI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011010"; -- (0x1A);
    constant ITYPE_SLTUI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "111010"; -- (0x3A);
    constant ITYPE_SNEI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "011001"; -- (0x19);
    constant ITYPE_ANDI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001100"; -- (0x0C);
    constant ITYPE_ORI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001101"; -- (0x0D);
    constant ITYPE_XORI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001110"; -- (0x0E);
    constant ITYPE_LB: std_logic_vector(OPCODE_SIZE-1 downto 0) := "100000"; -- (0x20);
    constant ITYPE_LBU: std_logic_vector(OPCODE_SIZE-1 downto 0) := "100100"; -- (0x24);
    constant ITYPE_LH: std_logic_vector(OPCODE_SIZE-1 downto 0) := "100001"; -- (0x21);
    constant ITYPE_LHU: std_logic_vector(OPCODE_SIZE-1 downto 0) := "100101"; -- (0x25);
    constant ITYPE_LW: std_logic_vector(OPCODE_SIZE-1 downto 0) := "100011"; -- (0x23);
    constant ITYPE_SB: std_logic_vector(OPCODE_SIZE-1 downto 0) := "101000"; -- (0x28);
    constant ITYPE_SH: std_logic_vector(OPCODE_SIZE-1 downto 0) := "101001"; -- (0x29);
    constant ITYPE_SW: std_logic_vector(OPCODE_SIZE-1 downto 0) := "101011"; -- (0x2B);
    constant ITYPE_LHI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "001111"; -- (0x0F);
    constant ITYPE_NOP: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010101"; -- (0x15);
    constant ITYPE_SLLI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010100"; -- (0x14);
    constant ITYPE_SRAI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010111"; -- (0x17);
    constant ITYPE_SRLI: std_logic_vector(OPCODE_SIZE-1 downto 0) := "010110"; -- (0x16);
    constant JTYPE_J: std_logic_vector(OPCODE_SIZE-1 downto 0) := "000010"; -- (0x02);
    constant JTYPE_JAL: std_logic_vector(OPCODE_SIZE-1 downto 0) := "000011"; -- (0x03);
    constant FUNC_ADD: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100000"; -- (0x20);
    constant FUNC_ADDU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100001"; -- (0x21);
    constant FUNC_SUB: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100010"; -- (0x22);
    constant FUNC_SUBU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100011"; -- (0x23);
    constant FUNC_SEQ: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101000"; -- (0x28);
    constant FUNC_SGE: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101101"; -- (0x2D);
    constant FUNC_SGEU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111101"; -- (0x3D);
    constant FUNC_SGT: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101011"; -- (0x2B);
    constant FUNC_SGTU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111011"; -- (0x3B);
    constant FUNC_SLE: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101100"; -- (0x2C);
    constant FUNC_SLEU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111100"; -- (0x3C);
    constant FUNC_SLT: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101010"; -- (0x2A);
    constant FUNC_SLTU: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111010"; -- (0x3A);
    constant FUNC_SNE: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000101001"; -- (0x29);
    constant FUNC_AND: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100100"; -- (0x24);
    constant FUNC_OR: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100101"; -- (0x25);
    constant FUNC_XOR: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000100110"; -- (0x26);
    constant FUNC_SLL: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000000100"; -- (0x04);
    constant FUNC_SRA: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000000111"; -- (0x07);
    constant FUNC_SRL: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000000110"; -- (0x06);
    constant FUNC_IMUL: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111111"; -- (0x3F);
    constant FUNC_IDIV: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111000"; -- (0x38);
    constant FUNC_IMOD: std_logic_vector(FUNC_SIZE-1 downto 0) := "00000111001"; -- (0x39);
    type OpcodeType is (addi_op, addui_op, subi_op, subui_op, beqz_op, bnez_op, jalr_op, jr_op, seqi_op, sgei_op, sgeui_op, sgti_op, sgtui_op, slei_op, sleui_op, slti_op, sltui_op, snei_op, andi_op, ori_op, xori_op, lb_op, lbu_op, lh_op, lhu_op, lw_op, sb_op, sh_op, sw_op, lhi_op, nop_op, slli_op, srai_op, srli_op, j_op, jal_op, add_op, addu_op, sub_op, subu_op, seq_op, sge_op, sgeu_op, sgt_op, sgtu_op, sle_op, sleu_op, slt_op, sltu_op, sne_op, and_op, or_op, xor_op, sll_op, sra_op, srl_op, imul_op, idiv_op, imod_op, invalid_op);
    function slv_to_opcode(
        i_opcode: in  std_logic_vector(OPCODE_SIZE-1 downto 0);
        i_func: in  std_logic_vector(FUNC_SIZE-1 downto 0)
    ) return OpcodeType;
end package instructions;

package body instructions is
    function slv_to_opcode(
        i_opcode: in  std_logic_vector(OPCODE_SIZE-1 downto 0);
        i_func: in  std_logic_vector(FUNC_SIZE-1 downto 0)
    ) return OpcodeType is
    begin
        case (i_opcode) is
            when RTYPE_OP =>
                case (i_func) is
                    when FUNC_ADD =>
                        return add_op;
                    when FUNC_ADDU =>
                        return addu_op;
                    when FUNC_SUB =>
                        return sub_op;
                    when FUNC_SUBU =>
                        return subu_op;
                    when FUNC_SEQ =>
                        return seq_op;
                    when FUNC_SGE =>
                        return sge_op;
                    when FUNC_SGEU =>
                        return sgeu_op;
                    when FUNC_SGT =>
                        return sgt_op;
                    when FUNC_SGTU =>
                        return sgtu_op;
                    when FUNC_SLE =>
                        return sle_op;
                    when FUNC_SLEU =>
                        return sleu_op;
                    when FUNC_SLT =>
                        return slt_op;
                    when FUNC_SLTU =>
                        return sltu_op;
                    when FUNC_SNE =>
                        return sne_op;
                    when FUNC_AND =>
                        return and_op;
                    when FUNC_OR =>
                        return or_op;
                    when FUNC_XOR =>
                        return xor_op;
                    when FUNC_SLL =>
                        return sll_op;
                    when FUNC_SRA =>
                        return sra_op;
                    when FUNC_SRL =>
                        return srl_op;
                    when FUNC_IMUL =>
                        return imul_op;
                    when FUNC_IDIV =>
                        return idiv_op;
                    when FUNC_IMOD =>
                        return imod_op;
                    when others =>
                        return invalid_op;
                end case;
            when ITYPE_ADDI =>
                return addi_op;
            when ITYPE_ADDUI =>
                return addui_op;
            when ITYPE_SUBI =>
                return subi_op;
            when ITYPE_SUBUI =>
                return subui_op;
            when ITYPE_BEQZ =>
                return beqz_op;
            when ITYPE_BNEZ =>
                return bnez_op;
            when ITYPE_JALR =>
                return jalr_op;
            when ITYPE_JR =>
                return jr_op;
            when ITYPE_SEQI =>
                return seqi_op;
            when ITYPE_SGEI =>
                return sgei_op;
            when ITYPE_SGEUI =>
                return sgeui_op;
            when ITYPE_SGTI =>
                return sgti_op;
            when ITYPE_SGTUI =>
                return sgtui_op;
            when ITYPE_SLEI =>
                return slei_op;
            when ITYPE_SLEUI =>
                return sleui_op;
            when ITYPE_SLTI =>
                return slti_op;
            when ITYPE_SLTUI =>
                return sltui_op;
            when ITYPE_SNEI =>
                return snei_op;
            when ITYPE_ANDI =>
                return andi_op;
            when ITYPE_ORI =>
                return ori_op;
            when ITYPE_XORI =>
                return xori_op;
            when ITYPE_LB =>
                return lb_op;
            when ITYPE_LBU =>
                return lbu_op;
            when ITYPE_LH =>
                return lh_op;
            when ITYPE_LHU =>
                return lhu_op;
            when ITYPE_LW =>
                return lw_op;
            when ITYPE_SB =>
                return sb_op;
            when ITYPE_SH =>
                return sh_op;
            when ITYPE_SW =>
                return sw_op;
            when ITYPE_LHI =>
                return lhi_op;
            when ITYPE_NOP =>
                return nop_op;
            when ITYPE_SLLI =>
                return slli_op;
            when ITYPE_SRAI =>
                return srai_op;
            when ITYPE_SRLI =>
                return srli_op;
            when JTYPE_J =>
                return j_op;
            when JTYPE_JAL =>
                return jal_op;
            when others =>
                return invalid_op;
        end case;
end function slv_to_opcode;
end instructions;
