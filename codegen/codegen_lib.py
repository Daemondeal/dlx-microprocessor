# VHDL Codegen Library 

INDENT_WIDTH = 4

def indent(level):
    return " " * (level * INDENT_WIDTH)

class Library:
    def __init__(self, name):
        self.name = name

    def codegen(self, indent_level=0):
        return f"use {self.name}.all;\n"

class VhdlType:
    def __init__(self, name):
        self.name = name

    def codegen(self):
        return self.name

class StandardLogic(VhdlType):
    def __init__(self):
        super().__init__("std_logic")

class StandardLogicVector(VhdlType):
    def __init__(self, width):
        if isinstance(width, int):
            name = f"std_logic_vector({width-1} downto 0)"
        else:
            name = f"std_logic_vector({width}-1 downto 0)"

        super().__init__(name)


class Signal:
    def __init__(self, name, sig_type):
        self.name = name
        self.sig_type = sig_type

    def codegen(self):
        return f"signal {self.name}: {self.sig_type.codegen()}"

class PortSignal(Signal):
    def __init__(self, name, sig_type, direction):
        super().__init__(name, sig_type)
        self.direction = direction

    def codegen(self):
        return f"{self.name}: {self.direction:<3} {self.sig_type.codegen()}"

class Statement:
    def __init__(self, code):
        self.code = code

    def codegen(self, indent_level=0):
        idt = indent(indent_level)
        return f"{idt}{self.code};\n"

class SignalAssignment(Statement):
    def __init__(self, target, value):
        super().__init__(f"{target} <= {value}")

class Process:
    def __init__(self, sensitivity, body):
        self.sensitivity = sensitivity
        self.body = body

    def codegen(self, indent_level=0):
        idt = indent(indent_level)

        result = f"{idt}process ({', '.join(self.sensitivity)})\n"
        result += f"{idt}begin\n"

        for statement in self.body:
            result += statement.codegen(indent_level+1)

        result += f"{idt}end process;\n"

        return result

class Case:
    def __init__(self, signal, cases, others):
        self.signal = signal
        self.cases = cases
        self.others = others

    def codegen(self, indent_level=0):
        idt = indent(indent_level)
        idt2 = indent(indent_level+1)

        result = f"{idt}case ({self.signal}) is\n"
        for name, statements in self.cases:
            result += f"{idt2}when {name} =>\n"
            for statement in statements:
                result += statement.codegen(indent_level+2)

        result += f"{idt2}when others =>\n"
        for statement in self.others:
            result += statement.codegen(indent_level+2)

        result += f"{idt}end case;\n"

        return result


class Module:
    def __init__(self, name, libraries, ports, defines, body):
        self.libraries = libraries
        self.ports = ports
        self.name = name
        self.defines = defines
        self.body = body

    def codegen(self, indent_level=0):
        result = "-- Generated by codegen_instructions.py, DO NOT TOUCH\n\n"
        result += "library ieee;\n\n"
        for library in self.libraries:
            result += library.codegen()

        result += "\n"
        idt = indent(indent_level+1)
        result += f"entity {self.name} is\n"
        result += f"{idt}port (\n"

        for port in self.ports[:-1]:
            result += f"{idt * 2}{port.codegen()};\n"

        result += f"{idt * 2}{self.ports[-1].codegen()});\n"

        result += f"end entity {self.name};\n\n"

        result += f"architecture Behavioral of {self.name} is\n"

        for statement in self.defines:
            result += statement.codegen(indent_level+1)

        result += f"begin\n"

        for statement in self.body:
            result += statement.codegen(indent_level+1)

        result += f"end Behavioral;\n"

        return result



class Package:
    def __init__(self, name, libraries, header, body):
        self.libraries = libraries
        self.name = name
        self.header = header
        self.body = body

    def codegen(self, indent_level=0):
        result = "-- Generated by instrs_codegen.py, DO NOT TOUCH\n\n"
        result += "library ieee;\n\n"
        for library in self.libraries:
            result += library.codegen()

        result += "\n"
        result += f"package {self.name} is\n"

        for statement in self.header:
            result += statement.codegen(indent_level+1)

        result += f"end package {self.name};\n\n"

        result += f"package body {self.name} is\n"

        for statement in self.body:
            result += statement.codegen(indent_level+1)

        result += f"end {self.name};\n"

        return result

class FunctionHeader:
    def __init__(self, name, inputs, retval):
        self.name = name
        self.inputs = inputs
        self.retval = retval

    def codegen(self, indent_level=0):
        idt = indent(indent_level)
        idt2 = indent(indent_level + 1)

        result = f"{idt}function {self.name}(\n"

        for input in self.inputs[:-1]:
            result += f"{idt2}{input.codegen()};\n"
        result += f"{idt2}{self.inputs[-1].codegen()}\n"

        result += f"{idt}) return {self.retval.codegen()};\n"

        return result

class Function:
    def __init__(self, name, inputs, retval, body):
        self.name = name
        self.inputs = inputs
        self.retval = retval
        self.body = body

    def get_header(self):
        return FunctionHeader(self.name, self.inputs, self.retval)

    def codegen(self, indent_level=0):
        idt = indent(indent_level)
        idt2 = indent(indent_level + 1)

        result = f"{idt}function {self.name}(\n"

        for input in self.inputs[:-1]:
            result += f"{idt2}{input.codegen()};\n"
        result += f"{idt2}{self.inputs[-1].codegen()}\n"

        result += f"{idt}) return {self.retval.codegen()} is\n"
        result += f"{idt}begin\n"

        for statement in self.body:
            result += statement.codegen(indent_level+1)

        result += f"end function {self.name};\n"

        return result

